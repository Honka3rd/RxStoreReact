import { BS, IBS, Reducer, RxImStore, RxNStore, RxStore, Subscribable } from "rx-store-types";
export declare const createObservableReducer: <S extends BS>(store: RxStore<S> & Subscribable<S>) => <K extends keyof S, T extends string>(key: K, reducer: Reducer<T, S, K>) => readonly [ReturnType<S[K]>, import("rx-store-types").Dispatch<ReturnType<S[K]>, T>];
export declare const createObservableNormalReducer: <S extends BS>(store: RxNStore<S> & Subscribable<S>) => <K extends keyof S, T extends string>(key: K, reducer: Reducer<T, S, K>) => readonly [ReturnType<S[K]>, import("rx-store-types").Dispatch<ReturnType<S[K]>, T>];
export declare const createObservableImmutableReducer: <S extends IBS>(store: RxImStore<S> & Subscribable<S>) => <K extends keyof S, T extends string>(key: K, reducer: Reducer<T, S, K>) => readonly [ReturnType<S[K]>, import("rx-store-types").Dispatch<ReturnType<S[K]>, T>];
