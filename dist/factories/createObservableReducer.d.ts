import { BS, IBS, Reducer, RxImStore, RxNStore, RxStore, Subscribable } from "rx-store-types";
export declare const createObservableReducer: <S extends BS>(store: RxStore<S> & Subscribable<S>) => <K extends keyof S, T extends string, P = void>(key: K, reducer: Reducer<T, P, S, K>) => (ReturnType<S[K]> | import("rx-store-types").Dispatch<P, T>)[];
export declare const createObservableNormalReducer: <S extends BS>(store: RxNStore<S> & Subscribable<S>) => <K extends keyof S, T extends string, P = void>(key: K, reducer: Reducer<T, P, S, K>) => (ReturnType<S[K]> | import("rx-store-types").Dispatch<P, T>)[];
export declare const createObservableImmutableReducer: <S extends IBS>(store: RxImStore<S> & Subscribable<S>) => <K extends keyof S, T extends string, P = void>(key: K, reducer: Reducer<T, P, S, K>) => (ReturnType<S[K]> | import("rx-store-types").Dispatch<P, T>)[];
